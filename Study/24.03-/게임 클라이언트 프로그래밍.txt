게임 클라이언트 프로그래밍

C#
 - 프로그래밍 언어
 - 객체지향 언어(분업에 매우 적합, 상속)
 - 가비지 컬렉션 기능이 있음

상속
 - 다른 클래스의 맴버(변수, 함수)를 물려받아 쓸 수 있게 되는 것
 - 물려받은 클래스 : 자식클래스, 파생클래스
 - 물려준 클래스 : 부모클래스, 기본(Base)클래스

접근 제한자 (Access Modifier)
 - 맴버가 자식클래스에서 접근할 수 있는 정도 
  - public : 모두가 접근할 수 있다.
  - private : 자신을 제외한 모든 클래스에서 접근할 수 없다.
  - protected : 자신과 자신을 상속받은 클래스에서만 접근할 수 있다.

메모리 풀(Memory Pool)
 - 메모리를 한번에 크게 할당 받은 후(Pool)에 필요한만큼 Pool에서 넘겨 받아 사용하는 방식
 - 런타임 성능을 올릴 수 있다.
 - 메모리 단편화 현상을 해결 

이벤트-드리븐(Event-Driven)
 - 프로그래밍 패러다임 중 하나
 - 프로그램이 비동기적인 동작이나 사건(Event)에 반응하여 동작을 변경하는 방식

예외(Exception)
 - 프로그래머가 가정하지 않은 것들(=만들지 않은 부분)
 - NullReferenceException


오브젝트 찾기
 - 이름 GameObject obj1 = GameObject.Find("이름");		//이름으로 찾기

 - 태그 GameObject obj2 = GameObject.FindWithTag("태그");	//태그로 찾기 - 함수 이름만 줄여놓은것
	GameObject obj3 = GameObject.FindGameObjectWithTag("태그");	//태그로 찾기
	GameObject[] obj4 = GameObject.FindGameObjectsWithTag("태그");	//같은 태그 모두 찾기

 - 타입 GameObject obj5 = GameObject.FindAnyObjectByType<GameObject>();	//특정 타임으로 찾기
									(아무거나 한개라 뭐가 나올지 모름)
	GameObject obj6 = GameObject.FindFirstObjectByType<GameObject>();	//Any보단 느리지만 타입중에 첫번째것을 가져옴
	// 특정타임 모두를 가져옴
	GameObject[] obj7 = GameObject.FindObjectsByType<GameObject>(FindObjectsInactive.Exclude, FindObjectSortType.None);
	// FindObjectOfType : 비권장


컴포넌트 찾기 
 - Transfor t = GetComponent<Tramsform>();	// == this.transform;
   this.gameObject.AddComponent<Test>();	// 컴포넌트 추가하기

터레인(Terrain)
 - 높이맵(Height Map)
 - 거대 지형을 쉽게 만들 수 있다.
 - 적은 메모리로 넓은 지형 표현 가능
 - 지형 구조가 단조롭다(동굴, 절벽같은 급경사 표현 불가능)

Resources 폴더 사용하기
 Resources.Load<Sprite>("경로");	// 리소스 폴더가 몇개있는 하나로 취급해서 불러오고 안에 폴더가 추가로 있다면 추가로 경로작성
 Resources파일에 있는건 게임 시작시 메모리에 담기기 때문에 메모리관리가 복잡해지고 시작 시 로딩이 길어진다.


InputManager : 매 프레임 마다 키 입력 상태를 확인하고 필요한 처리를 수행, 
		Polling 방식 -> Busy Wait 아무것도 안하는데 바쁨(성능저하 + CPU가 sleep 상태로 갈 수가 없음)
 Input.GetKeyDown(KeyCode.w)
 Input.GetButton("Jump') // 스페이스키가 눌려져 있는지
			// Project Setting -> Input Manager항목에 버튼 이름들이 어떤 키와 연결되어 있는지 설정되어 있음
 Input.GetAxis("Horizontal") // 1, 0, -1 의 값이 나오고 설정된 버튼으로 사용

 InputManager 단점 : Update()함수에 들어가서 매 프레임 마다 버튼이 눌러졌는지 확인을 하기에 비효율적임


InputSystem : Event-Driven 방식으로 구현 -> 이벤트가 생기면 실행


Life Cycle 기억
유니티 이벤트 함수
 - Awake -> 게임오브젝트가 씬에 추가되는 순간
 - OnEnable -> 오브젝트가 씬에 보일때
 - Start -> 업데이트 직전


 - Update -> 매 프레임 마다
 - LateUpdate -> 모든 업데이트들이 끝났을때
 - FixedUpdate -> Fixed Timestep가 설정한 값에 따라 일정하게 호출

 - OnCollisionEnter
 - OnCollisionStay
 - OnCollisionExit

 - OnTriggerEnter
 - OnCollisionStay
 - OnCollisionExit

메카님(Mecanim) -> 애니메이션 시스템

애니메이션 에셋
 - 애니메이터 컨트롤러 : 상태머신을 이용해 어떤 애니메이션을 재생할지를 결정하게 해주는 에셋
 - 애니메이션 클립 : 실제 애니메이션 동작을 저장해 놓은 에셋
 - 아바타 : 인강형 애니메이션 리타겟팅을 위한 본(bone)의 매핑정보를 저장한다.










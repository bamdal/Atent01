게임 알고리즘

값형식(Value Type)
 - struct
 - int, float, bool 등등
 - 스택 메모리에 저장된다.
 - 복사를 할 때 깊은 복사가 일어난다. (완전한 사본 생성)

참조형식(Reference Type)
 - class
 - string 등등
 - 힙 메모리에 저장된다.
 - 복사를 할 때 얕은 복사가 일어난다. (참조만 전달한다)

Boxing(박싱) -> 성능 감소가 심함
 - 값 형식을 참조타입으로 캐스팅하는 작업
 - 무조건 피해야 한다

자료구조
 - 기본 구성요소 : 노드

리스트, 큐, 스택

List<int> list = new List<int> // 제네릭 한 리스트, 특정 데이터 타입만 넣을 수 있는 리스트

선형 자료구조

리스트 : 데이터 부분 + 링크 부분으로 이뤄져 있다.
 - 시작노드를 Head라 하고 마지막 노드를 Tail이라 한다.
 - Add : 데이터 추가 , Remove : 데이터 제거

스택 Stack
 - Top : 데이터가 들어가고 나오는 위치
 - Push : Top에 데이터를 추가
 - Pop : Top에서 데이터를 꺼내기 

큐 Queue
 - front : 가장 앞에 있는 데이터 위치
 - rear : 가장 뒤에 있는 데이터 위치
 - enqueue : rear에 데이터를 추가
 - dequeue : front에 있는 데이터를 꺼내기

비선형 자료구조
 - 트리
 - 그래프

트리 Tree
 - 계층구조를 가진다.
 - 1:n의 구조를 가진다 (부모 하나당 여려개의 자식)
 - Root : 트리의 시작지점
 - Leaf, Terminal : 트리에서 자식이 없는 노드
 - Sibling : 형제 자매 관계

이진 트리 (Binary Tree)
 - 자식을 최대 2개 까지만 가질 수 있는 트리

이진 탐색 트리(Binary Search Tree)
 - 탐색에 강점을 가지는 트리
 - 순서가 있는 데이터(키)를 가져야 한다.
 - 키값이 크면 오른쪽, 작으면 왼쪽 자식으로 추가된다.
 - 트리의 밸런스가 깨지면 탐색 성능이 떨어진다.

힙(Heap)
 - 우선 순위 적용할 때
 - 데이터를 추가할 때 자동으로 정렬된다.
 - 최대힙(Max Heap), 최소힙(Min Heap)
 - 최대힙일때 무조건 부모는 자식보다 크다
 - 최소힙일때 무조건 부모는 자식보다 작다
 - 완전이진트리의 형태를 가져야한다.

그래프
 - n:n의 형태를 가진다.

알고리즘
 - 문제를 해결하기 위한 절차
 - 시간복잡도 : 데이터 개수에 따른 처리시간
  - 빅 오 표기법 : O(n), O(n^2), O(nlogN), O(logN)  // n : 데이터 개수
 - 공간복잡도 : 알고리즘 처리에 필요한 메모리 공간 정도

탐색 알고리즘
 - 데이터를 찾는 알고리즘
 - 선형 탐색 알고리즘
 - 이진 탐색 트리

정렬 알고리즘
 - 데이터를 순서대로 정리하는 알고리즘 

해시 알고리즘
 - 입력 데이터를 정해진 크기의 유니크한 데이터로 변경해주는 알고리즘
 - 해시 결과를 다시 원본 데이터로 만들 수 없어야 한다.
 - 해시 충돌 : 서로 다른 입력 값에 대해 같은 해시 값이 나오는 경우

길찾기 알고리즘
 - 다익스트라 알고리즘
 - A*알고리즘 : 휴리스틱 함수를 활용한다 
  - F(x) = G(x) + H(x) 
 G : 출발점에서 현재위치까지의 현재거리
 H : 현재 위치에서 목적지까지의 예상거리 - 휴리스틱
 open List = 찾아야 될 노드
 close List = 찾은 노드




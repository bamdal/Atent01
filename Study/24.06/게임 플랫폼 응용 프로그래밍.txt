게임 플랫폼 응용 프로그래밍

플랫폼
 - 소프트웨어가 구동 가능한 하드웨어 아키텍처나 소프트웨어 프레임워크의 종류

게임용 플랫폼
 - Steam, Epic Games, PlayStore, AppStore
 - XBox, PlayStation, Nintendo Switch
 - Windows, Mac, Android, IOS

멀티 플랫폼 or 크로스 플랫폼
 - 하나의 게임이 여러 플랫폼에서 동작할 수 있게 하는 것
 - 유니티와 언리얼 같은 현세대 대부분의 엔진은 지원함


운영체제(Operating System)
 - 시스템하드웨어(컴퓨터)를 관리하고 각종 공용 시스템 서비스를 제공하는 시스템
 - Window, Linux, Mac, Android, iOS 등등

폰 노이만 구조
 - 컴퓨터 하드웨어 구성
   CPU, Memory, Program

SDK(Softwear Development Kit)
 - 프로그래머가 어플리케이션(Application)을 만드는데 필요한 개발 도구를 모아 놓은 것
 - 개발도구 : 컴파일러, 라이브러리, 디버거, 문서(매뉴얼) 등등

API(Application Programming Interface)
 - 한 프로그램이 다른 컴퓨터나 프로그램에게 서비스를 제공하기 위해 만들어 놓은 소프트웨어 인터페이스

컴파일러(Compiler)
 - 사람이 고레벨 프로그래밍 언어로 작성한 코드를 기계어나 어셈블리어같은 저레벨 언어로 번역하는 프로그램
 - 코드 전체를 한번에 번역(시간이 걸린다), 번역한 결과를 실행시키는 것은 빠르다.

인터프리터(Interpreter)
 - 코드를 한 줄씩 실시간으로 번역
 - 실행속도가 느리다.

디자인패턴
 - 소프트웨어 디자인에서 특정 문맥에서 공통적으로 발생하는 문제에 대해 재사용 가능한 해결책
  - Singleton : 클래스 객체를 하나만 생성하는 디자인 패턴
  - Factory : 객체 생성을 전담하는 클래스를 만드는 디자인 패턴 

C#
 - 객체지향 언어 -> 추상화, 상속, 다형성, 캡슐화
 - 메모리 영역 
  - Heap 영역 -> 운영체제가 관리하는 메모리 영역
    - 새로 할당 받을 때 오래 걸린다
    - C#에서는 참조 타입을 저장한다 -> class 타입이 저장됨

  - Stack 영역 -> 실행중인 소프트웨어가 시작부터 가지고 있는 메모리 영역
   - 사용이 빠르다.
   - C#에서는 값타입을 저장한다 -> struct 타입이 저장됨

  - 박싱(Boxing)
   - 값 형식을 참조 형식으로 캐스팅 할 때 발생 스택에 저장되어 있던 데이터를 힙에 복사하면서 시간이 많이 소비하게 된다
  - 언박싱(UnBoxing)
   - 박싱의 반대, 참조 형식을 값형식으로 캐스팅 할 때 발생

Unity
 - 씬(Scene), 게임 오브젝트(GameObject), 컴포넌트(Component)

입력
 - InputManager -> update에서 매번검사
 - InputSystem -> 이벤트 드리븐

출력
 - Renderer -> 객체를 화면에 그리기

충돌 처리
 - Rigidbody -> 물리기능추가
 - Collider -> 충돌체크


이벤트 함수의 타이밍
 - Awake -> 오브젝트 생성 직후 실행
 - Start -> Update직전에 실행
 - Update -> 매 프레임마다 계산
 - FixedUpdate -> 일정한 시간마다 계산
 - LateUpdate -> 모든 업데이트 실행뒤 실행 그후 랜더링 실행

게임 오브젝트의 트랜스폼(변환) 4x4Matrix
 - 위치(Position)
 - 회전(Rotation)
 - 스케일(Scale)

배칭(Batching)
 - 동적 배칭 : Mesh가 작고 유사한 경우 합쳐서 한번에 처리한다
 - 정적 배칭 : static 게임 오브젝트를 큰 mesh로 함치고 한번에 처리한다.


게임 그래픽  프로그래밍

정점(vertex) - 다양한 정보를 가지고 있는 점 (위치, normal, UV)
엣지(Edge) - 정저 두개를 연결한 것
삼각형, 폴리곤, 페이스 - 정점 세개를 연결해서 만든 삼각형
메시(Mesh) - 삼각형들을 모아 만든 형태

조명(Light)
 - 종류
  - Directional Light : 특정 방향으로 평행하게 빛을 내보내는 광원
  - Point Light : 특정 위치에서 특정 반지름만큼 모든 방향을 빛을 균등하게 내보내는 광원
  - Spot Light : 특정 위치에서 특정 방향으로 바라보는 원뿔 모양으로 빛을 내보내는 광원(위치, 방향 반지름, 원뿔각도(내각,외각))

  - Ambient Light : 환경광, 씬의 모든 오브젝트에 동일하게 영향을 끼치는 전방향, 고정강도, 고정 색상의 광원
  - Area Light : 사각형 조명, 일정영역이 빛나는 것처럼 보인다. Bake해야 빛이 보이고 static만 빛남

셰이더(Shader)
 - 컴퓨터 그래픽스에서 3D장면의 음영계산, 특수효과, 화면 후 처리 등의 작업을 수행하기 위해 사용하는 소프트웨어 명령의 집합
 - GPU의 프로그래밍 가능한 랜더링 파이프라인을 사용하는 소프트웨어 명령의 집합
 - 셰이더는 GPU가 담당한다 -> GPU는 전용 언어로 코딩해야하기에 셰이더를 C언어로 코딩은 안된다, GPU는 if,switch를 못함

Unity 셰이더용 언어
 - HLSL(High Level Shading Language), GLSL(OpenGL Shading Language), CG(C for Graphics)
 - Surface shader
 - Shader Graph

셰이더의 종류
 - 픽셀 셰이더(Pixel Shader) -> 프래그맨트 셰이더(Fragment Shader)	// Fragment -> 그려질 수 있는 최소크기의 점
   - 스크린에 최종 출력되는 픽셀들의 색상이나 다른 특성들을 계산하여 변경하는데 사용되는 셰이더

 - 정점 셰이더(Vertex Shader)
  - 3D 모델이 가지는 각 정점을 입력으로 받은 다음 변경하는데 사용되는 셰이더

 - 테셀레이션 셰이더
   - 필요에 따라 폴리곤을 더 작은 폴리곤으로 조각내어 여러 이득을 얻는 기법

 - 지오메트리 셰이더
  - 정점 셰이더가 수행된 이후 추가적으로 점, 선, 삼각형 같은 프리미티브를 생성

랜더링 
 - 3D월드를 이미지로 변환하는 작업

랜더링 파이프라인
 - 3D 오브젝트들로 구성된 월드를 디스플레이에서 출력하기 위해 2차원 래스터 이미지로 변경하는 단계적인 작업

Built-in(내장) : 기존의 유니티 랜더링 파이프라인
SRP(Scriptable Rendering Pipeline) - URP, HDRP

Forward Rendering : 고전적인 랜더링 (Diffuse - 난반사, Specular, Ambient 로 색표현)
  -> 조명이 개수에 비례해서 부하가 n승으로 늘어남, 매우 안정적
Physically Based Rendering : 물리기반 랜더링(Albedo,Metalic,Smoothness)

post-processing - 랜더링후 이미지 후처리 역할

LOD(Level of Detail)
 - 3D오브젝트를 표현할 때 가까이 있으면 하이 폴리곤 모델을 사용하고 멀어질수록 로우 폴리곤 모델을 사용하는 기법

노멀맵(Nomal map) 
 - 하이폴리곤 모델의 법선벡터를 텍스쳐 형태로 저장한 후 게임에서 실제로 사용하는 로우 폴리곤 모델을 랜더링 할 때 그림자 계산을
     법선 벡터를 저장한 텍스처를 사용하여 계산하는 기법







